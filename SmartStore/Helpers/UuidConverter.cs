using System.Text;
using System.Text.RegularExpressions;

namespace SmartStorePOS.Helpers
{
    public static class UuidConverter
    {
        /// <summary>
        /// Converts a 10-digit string to a UUIDv4-compatible string.
        /// </summary>
        /// <param name="digits">A string of exactly 10 digits.</param>
        /// <returns>A UUIDv4 string or throws an exception if input is invalid.</returns>
        /// <exception cref="ArgumentException">Thrown if input is not 10 digits.</exception>
        public static Guid ToUuidV4(string digits)
        {
            try
            {
                // Validate input: must be exactly 10 digits
                //if (string.IsNullOrEmpty(digits) || digits.Length != 10 || !digits.All(char.IsDigit))
                //{
                //    throw new ArgumentException("Input must be a string of exactly 10 digits.", nameof(digits));
                //}

                // UUIDv4 format: 8-4-4-4-12 (e.g., 123e4567-e89b-12d3-a456-426614174000)
                // We'll use the 10 digits directly and pad with derived/fixed values
                StringBuilder uuid = new StringBuilder(36);

                // Part 1: First 8 hex chars (use first 8 digits)
                uuid.Append(digits.Substring(0, 8)); // e.g., "00020082"

                // Hyphen
                uuid.Append('-');

                // Part 2: Next 4 hex chars (use last 2 digits + "00")
                uuid.Append(digits.Substring(8, 2)); // e.g., "35"
                uuid.Append("00"); // Pad to 4 chars

                // Hyphen
                uuid.Append('-');

                // Part 3: Next 4 hex chars (version 4 + 3 derived chars)
                uuid.Append('4'); // UUIDv4 version
                                  // Derive 3 chars: use sum of digits mod 16 for variety
                int sum = digits.Sum(c => c - '0');
                uuid.AppendFormat("{0:x3}", sum % 4096); // 3 hex chars (e.g., "07b")

                // Hyphen
                uuid.Append('-');

                // Part 4: Next 4 hex chars (variant + 3 derived chars)
                uuid.Append('8'); // Variant (8, 9, a, or b; we choose 8)
                                  // Use last 3 digits reversed for variety
                uuid.Append(digits[9]); // e.g., "5"
                uuid.Append(digits[8]); // e.g., "3"
                uuid.Append(digits[7]); // e.g., "2"

                // Hyphen
                uuid.Append('-');

                // Part 5: Last 12 hex chars (repeat digits + pad with zeros)
                uuid.Append(digits); // e.g., "0002008235"
                uuid.Append("00"); // Pad to 12 chars

                // Convert to Guid
                Guid result = Guid.Empty;
                if (!Guid.TryParse(uuid.ToString(), out result))
                {
                    throw new ArgumentException("Failed to convert to UUIDv4.", nameof(digits));
                }
                return result;
            }
            catch (Exception ex)
            {
                return Guid.Empty;
            }
        }

        /// <summary>
        /// Converts a UUIDv4 string back to the original 10-digit string.
        /// </summary>
        /// <param name="uuid">A UUIDv4 string generated by ToUuidV4.</param>
        /// <returns>The original 10-digit string.</returns>
        /// <exception cref="ArgumentException">Thrown if UUID is invalid or not generated by ToUuidV4.</exception>
        public static string FromUuidV4(string uuid)
        {
            // Validate UUID format (8-4-4-4-12)
            if (string.IsNullOrEmpty(uuid) || !Regex.IsMatch(uuid, @"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89ab][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$", RegexOptions.IgnoreCase))
            {
                throw new ArgumentException("Input must be a valid UUIDv4 string.", nameof(uuid));
            }

            // Split UUID into parts
            string[] parts = uuid.Split('-');
            if (parts.Length != 5)
            {
                throw new ArgumentException("Invalid UUID format.", nameof(uuid));
            }

            // Extract digits from known positions
            // Original digits are in:
            // - Part 1: First 8 digits (chars 0-7)
            // - Part 2: Last 2 digits (chars 9-10)
            // - Part 5: All 10 digits (chars 19-28)
            // We'll use Part 5 for simplicity, as it contains all 10 digits
            string digits = parts[4].Substring(0, 10); // e.g., "0002008235"

            // Verify digits are numeric
            if (digits.Length != 10 || !digits.All(char.IsDigit))
            {
                throw new ArgumentException("UUID does not contain a valid 10-digit number.", nameof(uuid));
            }

            // Optional: Verify consistency with other parts
            if (parts[0] != digits.Substring(0, 8) || parts[1].Substring(0, 2) != digits.Substring(8, 2))
            {
                throw new ArgumentException("UUID does not match expected format from ToUuidV4.", nameof(uuid));
            }

            return digits;
        }
    }
}
